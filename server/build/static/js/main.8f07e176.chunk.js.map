{"version":3,"sources":["helpers/format.js","helpers/tempConverter.js","redux/ui.js","helpers/localState.js","API/cities.js","redux/cities.js","API/forecast.js","redux/forecast.js","redux/index.js","components/Input.js","components/WeatherData.js","components/Forecast.js","components/ForecastResults.js","components/City.js","components/CityList.js","components/InputResults.js","components/DarkModeToggler.js","components/CelciusToggler.js","components/MainMenu.js","components/App.js","index.js"],"names":["dateOptions","year","month","day","hour","minute","hour12","timeOptions","getLocalDateTime","timeZone","lclNow","Date","utcNow","getTime","getTimezoneOffset","newNow","Intl","DateTimeFormat","format","dateTime","k2c","k","Math","round","k2f","initialState","prefersDarkMode","prefersCelcius","previousCities","serializedState","localStorage","getItem","JSON","parse","err","getLocalState","inputValue","uiSlice","createSlice","name","reducers","toggleDarkMode","state","toggleCelcius","setInputValue","action","payload","addPreviousCities","newCity","findIndex","prevCity","id","unshift","length","pop","delPreviousCity","cityIndexToDelete","splice","actions","reducer","axios","create","baseURL","fetchState","response","cityNameToSearch","fetchCities","createAsyncThunk","q","API","get","params","then","res","data","catch","citiesSlice","citiesReset","setCityNameToSearch","extraReducers","fulfilled","pending","cityIdToSearch","fetchForecast","forecastSlice","forecastReset","setCityIdToSearch","store","configureStore","ui","cities","forecast","subscribe","stringify","setItem","Error","setLocalState","getState","Input","dispatch","useDispatch","useSelector","useDebouncedCallback","value","debouncedCallback","TextField","label","variant","fullWidth","onChange","e","target","disabled","autoComplete","WeatherData","temp","pressure","humidity","minTemp","temp_min","maxTemp","temp_max","sunrise","sunset","convertedTemp","convertedMinTemp","convertedMaxTemp","Box","display","fontFamily","fontSize","flexGrow","color","flexDirection","fontWeight","useStyles","makeStyles","avatar","backgroundColor","colors","grey","Forecast","props","classes","main","cityName","weather","coord","sys","timezone","country","weatherMain","weatherDesc","description","weatherIcon","icon","lon","lat","mapUrl","Card","CardHeader","Avatar","alt","src","className","title","subheader","Divider","light","CardContent","CardMedia","component","ForecastResults","useEffect","cod","Alert","severity","message","Grid","container","justify","CircularProgress","renderComponent","City","city","onCityClick","small","height","width","ListItem","button","onClick","ListItemAvatar","size","ListItemText","Row","index","style","cityItem","key","CityList","itemCount","itemSize","itemData","InputResults","handleCityClick","disableShrink","DarkModeToggler","Switch","checked","CelciusToggler","theme","spacing","item","minWidth","menuButton","marginRight","dot","margin","MainMenu","React","useState","anchorEl","setAnchorEl","open","Boolean","handleClose","Paper","position","Toolbar","IconButton","edge","aria-label","aria-controls","aria-haspopup","currentTarget","Typography","Menu","keepMounted","onClose","List","ListSubheader","map","MenuItem","ListItemSecondaryAction","handleCityDelClick","Delete","App","useMemo","createMuiTheme","palette","type","ThemeProvider","CssBaseline","Container","maxWidth","m","xs","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f07e176.chunk.js","sourcesContent":["const dateOptions = {\n  year: 'numeric',\n  month: '2-digit',\n  day: '2-digit',\n  hour: 'numeric',\n  minute: '2-digit',\n  hour12: false\n};\n\nconst timeOptions = { hour: 'numeric', minute: '2-digit', hour12: false };\n\nexport const getLocalDateTime = (timeZone) => {\n  const lclNow = new Date();\n  const utcNow = lclNow.getTime() + lclNow.getTimezoneOffset() * 60000;\n  const newNow = new Date(utcNow + timeZone * 1000);\n  return new Intl.DateTimeFormat('UTC', dateOptions).format(newNow);\n};\n\nexport const getTime = (dateTime) => new Intl.DateTimeFormat('default', timeOptions).format(dateTime * 1000);\n","export const k2c = (k) => `${Math.round(k - 273.15)}°C`;\nexport const k2f = (k) => `${Math.round(((k - 273.15) * 9) / 5 + 32)}°F`;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { getLocalState } from '../helpers';\n\nconst initialState = {\n  prefersDarkMode: false,\n  prefersCelcius: true,\n  previousCities: [],\n  ...getLocalState(),\n  inputValue: ''\n};\n\nconst uiSlice = createSlice({\n  name: 'ui',\n  initialState,\n  reducers: {\n    toggleDarkMode: (state) => {\n      state.prefersDarkMode = !state.prefersDarkMode;\n    },\n    toggleCelcius: (state) => {\n      state.prefersCelcius = !state.prefersCelcius;\n    },\n    setInputValue: (state, action) => {\n      state.inputValue = action.payload;\n    },\n    addPreviousCities: (state, action) => {\n      const newCity = action.payload;\n      const cityAlreadyExists = state.previousCities.findIndex((prevCity) => prevCity.id === newCity.id) !== -1;\n      if (!cityAlreadyExists) {\n        state.previousCities.unshift(action.payload);\n        if (state.previousCities.length > 5) state.previousCities.pop();\n      }\n    },\n    delPreviousCity: (state, action) => {\n      const cityIndexToDelete = action.payload;\n      state.previousCities.splice(cityIndexToDelete, 1);\n    }\n  }\n});\n\nconst { actions, reducer } = uiSlice;\n\nexport const { toggleDarkMode, toggleCelcius, setInputValue, addPreviousCities, delPreviousCity } = actions;\n\nexport default reducer;\n","export const getLocalState = () => {\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (!serializedState) return undefined;\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const setLocalState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (err) {\n    throw new Error(\"can't access localStorage\");\n  }\n};\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: `/cities`,\n});\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport API from '../API/cities';\n\nconst initialState = {\n  fetchState: null,\n  response: null,\n  cityNameToSearch: null\n};\n\nexport const fetchCities = createAsyncThunk('cities/fetchCities', (q) =>\n  API.get('/', { params: { q } })\n    .then((res) => res.data)\n    .catch((err) => err)\n);\n\nconst citiesSlice = createSlice({\n  name: 'cities',\n  initialState,\n  reducers: {\n    citiesReset: () => initialState,\n    setCityNameToSearch: (state, action) => {\n      state.cityNameToSearch = action.payload;\n    }\n  },\n  extraReducers: {\n    [fetchCities.fulfilled]: (state, action) => {\n      state.response = action.payload;\n      state.fetchState = 'fulfilled';\n    },\n    [fetchCities.pending]: (state) => {\n      state.fetchState = 'pending';\n    }\n  }\n});\n\nconst { actions, reducer } = citiesSlice;\n\nexport const { citiesReset, setCityNameToSearch } = actions;\n\nexport default reducer;\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: `/forecast`,\n});\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport API from '../API/forecast';\n\nconst initialState = {\n  fetchState: null,\n  response: null,\n  cityIdToSearch: null\n};\n\nexport const fetchForecast = createAsyncThunk('forecast/fetchForecast', (id) =>\n  API.get('/', { params: { id } })\n    .then((res) => res.data)\n    .catch((err) => err)\n);\n\nconst forecastSlice = createSlice({\n  name: 'forecast',\n  initialState,\n  reducers: {\n    forecastReset: () => initialState,\n    setCityIdToSearch: (state, action) => {\n      state.cityIdToSearch = action.payload;\n    }\n  },\n  extraReducers: {\n    [fetchForecast.fulfilled]: (state, action) => {\n      state.response = action.payload;\n      state.fetchState = 'fulfilled';\n    },\n    [fetchForecast.pending]: (state) => {\n      state.fetchState = 'pending';\n    }\n  }\n});\n\nconst { actions, reducer } = forecastSlice;\n\nexport const { forecastReset, setCityIdToSearch } = actions;\n\nexport default reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { setLocalState } from '../helpers';\n\nimport ui from './ui';\nimport cities from './cities';\nimport forecast from './forecast';\n\nexport const store = configureStore({\n  reducer: { ui, cities, forecast }\n});\n\nstore.subscribe(() => {\n  setLocalState(store.getState().ui);\n});\n\nexport { fetchCities, citiesReset, setCityNameToSearch } from './cities';\nexport { fetchForecast, forecastReset, setCityIdToSearch } from './forecast';\nexport { toggleDarkMode, toggleCelcius, setInputValue, addPreviousCities, delPreviousCity } from './ui';\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TextField } from '@material-ui/core';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { setCityNameToSearch, setInputValue } from '../redux';\n\nfunction Input() {\n  const dispatch = useDispatch();\n\n  const inputValue = useSelector((state) => state.ui.inputValue);\n  const fetchState = useSelector((state) => state.cities.fetchState);\n\n  const [debouncedCallback] = useDebouncedCallback((value) => {\n    if (inputValue.length > 1) dispatch(setCityNameToSearch(value));\n  }, 1000);\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n    dispatch(setInputValue(value));\n    debouncedCallback(value);\n  };\n\n  return (\n    <TextField\n      label='Enter city name'\n      id='outlined-margin-normal'\n      variant='outlined'\n      fullWidth\n      onChange={handleChange}\n      value={inputValue}\n      disabled={fetchState === 'pending'}\n      autoComplete='off'\n    />\n  );\n}\n\nexport default Input;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { Box } from '@material-ui/core';\nimport { getTime, k2c, k2f } from '../helpers';\n\nfunction WeatherData({ data }) {\n  const { temp, pressure, humidity, temp_min: minTemp, temp_max: maxTemp, sunrise, sunset } = data;\n  const prefersCelcius = useSelector((state) => state.ui.prefersCelcius);\n  const convertedTemp = prefersCelcius ? k2c(temp) : k2f(temp);\n  const convertedMinTemp = prefersCelcius ? k2c(minTemp) : k2f(minTemp);\n  const convertedMaxTemp = prefersCelcius ? k2c(maxTemp) : k2f(maxTemp);\n\n  return (\n    <Box display='flex' fontFamily='Monospace'>\n      <Box fontSize='24px'>{convertedTemp}&nbsp;</Box>\n      <Box flexGrow={1}>\n        <Box display='flex'>\n          <Box color='primary.light'>HI:&nbsp;</Box>\n          {convertedMaxTemp}\n        </Box>\n        <Box display='flex'>\n          <Box color='secondary.light'>LO:&nbsp;</Box>\n          {convertedMinTemp}\n        </Box>\n      </Box>\n      <Box flexGrow={1} display='flex' flexDirection='column'>\n        <Box display='flex' flexDirection='row'>\n          <Box fontWeight='fontWeightBold'>pressure:&nbsp;</Box>\n          <Box>{pressure}</Box>\n        </Box>\n        <Box display='flex' flexDirection='row'>\n          <Box fontWeight='fontWeightBold'>humidity:&nbsp;</Box>\n          <Box>{humidity}%</Box>\n        </Box>\n      </Box>\n      <Box flexGrow={1} display='flex' flexDirection='column'>\n        <Box display='flex' flexDirection='row'>\n          <Box fontWeight='fontWeightBold'>dawn:&nbsp;</Box>\n          <Box>{getTime(sunrise)}</Box>\n        </Box>\n        <Box display='flex' flexDirection='row'>\n          <Box fontWeight='fontWeightBold'>dusk:&nbsp;</Box>\n          <Box>{getTime(sunset)}</Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n\nexport default WeatherData;\n","import React from 'react';\nimport { Card, CardHeader, CardContent, CardMedia, Avatar, makeStyles, Divider, colors } from '@material-ui/core';\nimport WeatherData from './WeatherData';\nimport { getLocalDateTime } from '../helpers';\n\nconst useStyles = makeStyles(() => ({\n  avatar: {\n    backgroundColor: colors.grey[400]\n  }\n}));\n\nfunction Forecast(props) {\n  const classes = useStyles();\n  const { forecast } = props;\n  const { main, name: cityName, weather, coord, sys, timezone: timeZone } = forecast;\n  const { sunrise, sunset, country } = sys;\n  const data = { ...main, sunrise, sunset };\n  const { main: weatherMain, description: weatherDesc, icon: weatherIcon } = weather[0];\n  const { lon, lat } = coord;\n\n  const googleMapStaticUrl = 'https://maps.googleapis.com/maps/api/staticmap';\n  const publicApiKey = 'AIzaSyATSrlXeexQILWJpBpOehRMdeVeRowLq70';\n  const mapUrl = `${googleMapStaticUrl}?center=${lat},${lon}&zoom=10&scale=1&size=520x200&maptype=hybrid&key=${publicApiKey}`;\n\n  return (\n    <Card>\n      <CardHeader\n        avatar={\n          <Avatar\n            alt={weatherDesc}\n            src={`http://openweathermap.org/img/wn/${weatherIcon}@2x.png`}\n            className={classes.avatar}\n          />\n        }\n        title={`Weather in ${cityName} (${country})`}\n        subheader={`${weatherMain} (${weatherDesc}) • Local Time: ${getLocalDateTime(timeZone)}`}\n      />\n      <Divider light variant='middle' />\n      <CardContent>\n        <WeatherData data={data} />\n      </CardContent>\n      <CardMedia component='img' src={mapUrl} />\n    </Card>\n  );\n}\n\nexport default Forecast;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Alert } from '@material-ui/lab';\nimport { CircularProgress, Grid } from '@material-ui/core';\nimport { fetchForecast } from '../redux';\nimport Forecast from './Forecast';\n\nfunction ForecastResults() {\n  const dispatch = useDispatch();\n\n  const response = useSelector((state) => state.forecast.response);\n  const cityIdToSearch = useSelector((state) => state.forecast.cityIdToSearch);\n  const fetchState = useSelector((state) => state.forecast.fetchState);\n  const cityNameToSearch = useSelector((state) => state.cities.cityNameToSearch);\n\n  useEffect(() => {\n    if (cityIdToSearch) {\n      dispatch(fetchForecast(cityIdToSearch));\n    }\n  }, [cityIdToSearch, dispatch]);\n\n  const renderComponent = () => {\n    if (fetchState !== 'idle' && !cityNameToSearch) {\n      if (fetchState === 'fulfilled') {\n        if (response.cod === 200) {\n          if (response.coord) {\n            return <Forecast forecast={response} />;\n          }\n          return <Alert severity='info'>No forecast found for City with id &quot;{cityIdToSearch}&quot;.</Alert>;\n        }\n        return <Alert severity='error'>{response.message}</Alert>;\n      }\n      if (fetchState === 'pending') {\n        return (\n          <Grid container justify='center'>\n            <CircularProgress />\n          </Grid>\n        );\n      }\n    }\n    return null;\n  };\n\n  return renderComponent();\n}\n\nexport default ForecastResults;\n","import React from 'react';\nimport { ListItemAvatar, Avatar, ListItem, ListItemText } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction City(props) {\n  const { city, onCityClick } = props;\n\n  const useStyles = makeStyles({\n    small: {\n      height: '24px',\n      width: '24px'\n    }\n  });\n\n  const classes = useStyles();\n\n  return (\n    <ListItem button onClick={() => onCityClick(city.id, city.name)}>\n      <ListItemAvatar>\n        <Avatar\n          className={classes.small}\n          variant='rounded'\n          size='small'\n          alt='la'\n          src={`https://www.countryflags.io/${city.country}/shiny/24.png`}\n        />\n      </ListItemAvatar>\n      <ListItemText>\n        {city.state && `${city.state} - `}\n        {city.name}\n      </ListItemText>\n    </ListItem>\n  );\n}\n\nexport default City;\n","import React from 'react';\nimport { FixedSizeList as List } from 'react-window';\nimport City from './City';\n\nfunction Row(props) {\n  const { index, style, data } = props;\n  const { cities, onCityClick } = data;\n  const cityItem = cities[index];\n  return (\n    <div style={style} key={index}>\n      <City city={cityItem} onCityClick={onCityClick} />\n    </div>\n  );\n}\n\nfunction CityList(props) {\n  const { cities, onCityClick } = props;\n\n  return (\n    <List className='List' height={300} itemCount={cities.length} itemSize={40} itemData={{ cities, onCityClick }}>\n      {Row}\n    </List>\n  );\n}\n\nexport default CityList;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Alert } from '@material-ui/lab';\nimport { CircularProgress, Grid } from '@material-ui/core';\nimport { citiesReset, fetchCities, setInputValue, addPreviousCities, setCityIdToSearch } from '../redux';\nimport CityList from './CityList';\n\nfunction InputResults() {\n  const dispatch = useDispatch();\n\n  const handleCityClick = (id, name) => {\n    dispatch(setInputValue(name));\n    dispatch(addPreviousCities({ id, name }));\n    dispatch(citiesReset());\n    dispatch(setCityIdToSearch(id));\n  };\n\n  const response = useSelector((state) => state.cities.response);\n  const cityNameToSearch = useSelector((state) => state.cities.cityNameToSearch);\n  const fetchState = useSelector((state) => state.cities.fetchState);\n  const inputValue = useSelector((state) => state.ui.inputValue);\n\n  useEffect(() => {\n    if (cityNameToSearch) {\n      dispatch(fetchCities(cityNameToSearch));\n    }\n  }, [cityNameToSearch, dispatch]);\n\n  const renderComponent = () => {\n    if (fetchState !== 'idle') {\n      if (fetchState === 'fulfilled') {\n        if (!response.name) {\n          if (response.length) {\n            return <CityList cities={response} onCityClick={handleCityClick} />;\n          }\n          return <Alert severity='info'>No cities found using &quot;{inputValue}&quot;.</Alert>;\n        }\n        return <Alert severity='error'>{response.message}</Alert>;\n      }\n      if (fetchState === 'pending') {\n        return (\n          <Grid container justify='center'>\n            <CircularProgress disableShrink />\n          </Grid>\n        );\n      }\n    }\n    return null;\n  };\n\n  return renderComponent();\n}\n\nexport default InputResults;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Switch } from '@material-ui/core';\nimport { toggleDarkMode } from '../redux';\n\nfunction DarkModeToggler() {\n  const dispatch = useDispatch();\n  const prefersDarkMode = useSelector((state) => state.ui.prefersDarkMode);\n\n  const handleClick = () => {\n    dispatch(toggleDarkMode());\n  };\n\n  return <Switch checked={prefersDarkMode} onChange={handleClick} color='default' />;\n}\n\nexport default DarkModeToggler;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Switch } from '@material-ui/core';\nimport { toggleCelcius } from '../redux';\n\nfunction CelciusToggler() {\n  const dispatch = useDispatch();\n  const prefersCelcius = useSelector((state) => state.ui.prefersCelcius);\n\n  const handleClick = () => {\n    dispatch(toggleCelcius());\n  };\n\n  return <Switch checked={prefersCelcius} onChange={handleClick} color='default' />;\n}\n\nexport default CelciusToggler;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  makeStyles,\n  Box,\n  IconButton,\n  Avatar,\n  MenuItem,\n  ListItem,\n  Menu,\n  List,\n  Divider,\n  ListItemText,\n  ListItemSecondaryAction,\n  ListSubheader,\n  Typography,\n  Paper,\n  Toolbar\n} from '@material-ui/core';\n\nimport {\n  Menu as MenuIcon,\n  Brightness5 as SunIcon,\n  Brightness3 as MoonIcon,\n  Delete as DeleteIcon\n} from '@material-ui/icons';\n\nimport { delPreviousCity, setInputValue, setCityIdToSearch } from '../redux';\n\nimport DarkModeToggler from './DarkModeToggler';\nimport CelciusToggler from './CelciusToggler';\n\nconst useStyles = makeStyles((theme) => ({\n  small: {\n    width: theme.spacing(4),\n    height: theme.spacing(4)\n  },\n  item: {\n    minWidth: '300px'\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    fontWeight: 'bold',\n    fontSize: '14'\n  },\n  dot: {\n    margin: '2px'\n  }\n}));\n\nfunction MainMenu() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const previousCities = useSelector((state) => state.ui.previousCities);\n\n  const handleMenuClick = (e) => {\n    setAnchorEl(e.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleCityNameClick = (name, id) => {\n    dispatch(setInputValue(name));\n    dispatch(setCityIdToSearch(id));\n    handleClose();\n  };\n\n  const handleCityDelClick = (index) => {\n    dispatch(delPreviousCity(index));\n  };\n\n  return (\n    <Paper position='static' color='primary'>\n      <Toolbar>\n        <IconButton\n          edge='start'\n          aria-label='menu1'\n          aria-controls='menu1'\n          aria-haspopup='true'\n          onClick={handleMenuClick}\n          className={classes.menuButton}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography className={classes.title} component='span'>\n          WEE\n        </Typography>\n        <Typography className={classes.dot} variant='h3' component='span' color='secondary'>\n          ·\n        </Typography>\n        <Typography component='span'>WEATHER</Typography>\n        <Typography className={classes.dot} variant='h3' component='span' color='primary'>\n          ·\n        </Typography>\n        <Typography component='span'>APP</Typography>\n      </Toolbar>\n      <Menu id='menu1' anchorEl={anchorEl} keepMounted open={open} onClose={handleClose}>\n        <List subheader={<ListSubheader>SETTINGS</ListSubheader>}>\n          <ListItem className={classes.item}>\n            <ListItemText>Dark Mode</ListItemText>\n            <Avatar className={classes.small}>\n              <SunIcon />\n            </Avatar>\n            <DarkModeToggler />\n            <Avatar className={classes.small}>\n              <MoonIcon />\n            </Avatar>\n          </ListItem>\n          <ListItem>\n            <ListItemText>Temp. Unit</ListItemText>\n            <Avatar className={classes.small} size='small'>\n              <Box fontWeight='bold' fontSize='1.2em'>\n                F\n              </Box>\n            </Avatar>\n            <CelciusToggler />\n            <Avatar className={classes.small} size='small'>\n              <Box fontWeight='bold' fontSize='1.2em'>\n                C\n              </Box>\n            </Avatar>\n          </ListItem>\n        </List>\n        {previousCities.length > 0 && <Divider /> && (\n          <List subheader={<ListSubheader>PREVIOUS CITIES</ListSubheader>}>\n            {previousCities.map((prevCity, index) => (\n              <MenuItem key={prevCity.id} onClick={() => handleCityNameClick(prevCity.name, prevCity.id)}>\n                <ListItemText>{prevCity.name}</ListItemText>\n                <ListItemSecondaryAction>\n                  <IconButton edge='end' aria-label='delete' onClick={() => handleCityDelClick(index)}>\n                    <DeleteIcon />\n                  </IconButton>\n                </ListItemSecondaryAction>\n              </MenuItem>\n            ))}\n          </List>\n        )}\n      </Menu>\n    </Paper>\n  );\n}\n\nexport default MainMenu;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { Container, Grid, Box } from '@material-ui/core';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport 'typeface-roboto';\n\nimport Input from './Input';\nimport ForecastResults from './ForecastResults';\nimport InputResults from './InputResults';\nimport MainMenu from './MainMenu';\n\nfunction App() {\n  const prefersDarkMode = useSelector((state) => state.ui.prefersDarkMode);\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light'\n        }\n      }),\n    [prefersDarkMode]\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline>\n        <Container maxWidth='sm'>\n          <Box m={2}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <MainMenu />\n              </Grid>\n              <Grid item xs={12}>\n                <Input />\n              </Grid>\n              <Grid item xs={12}>\n                <InputResults />\n                <ForecastResults />\n              </Grid>\n            </Grid>\n          </Box>\n        </Container>\n      </CssBaseline>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux';\nimport App from './components/App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}